{"version":3,"sources":["Components/About.js","Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","backgroundColor","React","createElement","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","data-bs-parent","Navbar","Link","to","title","aria-label","aria-current","aboutText","href","role","onClick","toggleMode","height","width","cursor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","heading","class","value","onChange","event","target","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","reversedText","split","reverse","join","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","filter","element","defaultProps","Alert","alert","concat","msg","App","_useState3","_useState4","setAlert","Router","cls","body","classList","remove","add","Routes","Route","exact","path","message","setTimeout","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.8dcf3004.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function About(props) {\n\n    // const [myStyle, setMyStyle] = useState({\n    //     color : 'black',\n    //     backgroundColor : 'white'\n    // })\n\n    let myStyle = {\n        color: props.mode === 'dark'? 'white':'#042743',\n        backgroundColor: props.mode === 'dark'? '#042743':'white'\n    }\n\n\n  return (\n    <div>\n        <div className=\"container\" style={myStyle}>\n        <h1 className='my-3' style={{color: props.mode === 'dark'?'white':'#042743'}}> About Us </h1>\n         <div className=\"accordion\" id=\"accordionExample\">\n            <div className=\"accordion-item\" style={myStyle}>\n                <h2 className=\"accordion-header\">\n                <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n                    <strong>Analyze your text</strong>\n                </button>\n                </h2>\n                <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\n                <div className=\"accordion-body\" style={myStyle}>\n                    TextUtils gives you a way to analyze your text quickly and efficiently. Be it word count, character count or look at the preview at once.\n                </div>\n                </div>\n            </div>\n            <div className=\"accordion-item\">\n                <h2 className=\"accordion-header\">\n                <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\n                    <strong>Free to use</strong>\n                </button>\n                </h2>\n                <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\n                <div className=\"accordion-body\" style={myStyle}>\n                    TextUtils is a free character counter tool that provides instant character count and word count statics for a given text. TextUtils reports the number of words and characters. Thus it is suitable for writing text with word/ character limit. \n                </div>\n                </div>\n            </div>\n            <div className=\"accordion-item\">\n                <h2 className=\"accordion-header\">\n                <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\n                    <strong>Browser compatible</strong>\n                </button>\n                </h2>\n                <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\n                <div className=\"accordion-body\" style={myStyle}>\n                    This works in any browser such as chrome, firefox, internet explorer, safari, etc. It suits to count characters in facebook, blog, books, excel document, pdf document, essay, etc.\n                </div>\n                </div>\n            </div>\n          </div>\n        </div>\n        {/* <div className=\"container\" style = {myStyle}>\n            <button onClick={toggleStyle} type=\"button\" className=\"btn btn-primary\"> {btnText} </button>\n        </div> */}\n    </div>\n  )\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom';\nexport default function Navbar(props) {\n  return (\n    <div>\n\n\n      {/* left wale  */}\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n      <div className=\"container-fluid\">\n        <Link className=\"navbar-brand\" to=\"/\"> {props.title} </Link>\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\n            </li>\n            <li className=\"nav-item dropdown\">\n              <a className=\"nav-link dropdown-toggle\" href=\"/\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                Dropdown\n              </a>\n              <ul className=\"dropdown-menu\">\n                <li><a className=\"dropdown-item\" href=\"/\">Action</a></li>\n                <li><a className=\"dropdown-item\" href=\"/\">Another action</a></li>\n                <li><hr className=\"dropdown-divider\"/></li>\n                <li><a className=\"dropdown-item\" href=\"/\">Something else here</a></li>\n              </ul>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link disabled\" href = \"/\">Disabled</a>\n            </li>\n          </ul>\n\n\n\n          {/* right wale  */}\n          {/* <div className={`btn-group text-${props.mode==='light'?'blue':'red'}`} role=\"group\" aria-label=\"Basic radio toggle button group\">\n              <input type=\"radio\" className=\"btn-check\" onClick={props.toggleMode} name=\"btnradio\" id=\"btnradio1\" autocomplete=\"off\"/>\n              <label className=\"btn btn-outline-success\" htmlFor=\"btnradio1\">Green mode</label>\n\n              <input type=\"radio\" className=\"btn-check\" onClick={props.toggleMode} name=\"btnradio\" id=\"btnradio2\" autocomplete=\"off\"/>\n              <label className=\"btn btn-outline-primary\" htmlFor=\"btnradio2\">Blue mode</label>\n\n              <input type=\"radio\" className=\"btn-check\" onClick={props.toggleMode} name=\"btnradio\" id=\"btnradio3\" autocomplete=\"off\"/>\n              <label className=\"btn btn-outline-danger\" htmlFor=\"btnradio3\">Red mode</label>\n\n              <input type=\"radio\" className=\"btn-check\" onClick={props.toggleMode} name=\"btnradio\" id=\"btnradio4\" autocomplete=\"off\"/>\n              <label className=\"btn btn-outline-dark\" htmlFor=\"btnradio4\">Dark mode</label>\n\n              <input type=\"radio\" className=\"btn-check\" onClick={props.toggleMode} name=\"btnradio\" id=\"btnradio5\" autocomplete=\"off\"/>\n              <label className=\"btn btn-outline-secondary\" htmlFor=\"btnradio5\">Light mode</label>\n\n               &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n          </div> */}\n\n          <div className=\"d-flex\">\n            <div className=\"bg-primary rounded mx-2\" onClick={()=>{props.toggleMode('primary')}} style={{height:'30px', width:'30px', cursor:\"pointer\"}}></div>\n          </div>\n          <div className=\"d-flex\">\n            <div className=\"bg-success rounded mx-2\" onClick={()=>{props.toggleMode('success')}} style={{height:'30px', width:'30px', cursor:\"pointer\"}}></div>\n          </div>\n          <div className=\"d-flex\">\n            <div className=\"bg-danger rounded mx-2\" onClick={()=>{props.toggleMode('danger')}} style={{height:'30px', width:'30px', cursor:\"pointer\"}}></div>\n          </div>\n          <div className=\"d-flex\">\n            <div className=\"bg-warning rounded mx-2\" onClick={()=>{props.toggleMode('warning')}} style={{height:'30px', width:'30px', cursor:\"pointer\"}}></div>\n          </div>\n          <div className=\"d-flex\">\n            <div className=\"bg-light rounded mx-2 border border-dark\" onClick={()=>{props.toggleMode('light')}} style={{height:'30px', width:'30px', cursor:\"pointer\"}}></div>\n          </div>\n          <div className=\"d-flex\">\n            <div className=\"bg-dark rounded mx-2 border border-light\" onClick={()=>{props.toggleMode('dark')}} style={{height:'30px', width:'30px', cursor:\"pointer\"}}></div>\n          </div>\n          {/* <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n              //  eslint-disable-next-line\n              <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\"/>\n               <label className={`form-check-label text-${props.mode==='dark'?'light':'dark'}`} htmlhtmlFor=\"flexSwitchCheckDefault\"></label>\n          </div>  */}\n        </div>\n      </div>\n    </nav>\n    </div>\n  )\n}\n\nNavbar.propTypes = {\n  title: PropTypes.string.isRequired ,\n  aboutText: PropTypes.string \n};\n\nNavbar.defaultProps = {\n  title: 'Akshay', \n  aboutText: 'Jain'\n}","import React, {useState} from 'react'\n\nexport default function TextForm(props) {\n\n  const handleUpClick = () => {\n    // console.log(\"uppercase was clicked\");\n    let newText = text.toUpperCase();\n    setText(newText);\n    props.showAlert(\"Converted to uppercase\",\"success\");\n  }\n  const handleLoClick = () => {\n    // console.log(\"uppercase was clicked\");\n    let newText = text.toLowerCase();\n    setText(newText);\n    props.showAlert(\"Converted to lowercase\",\"success\");\n  }\n  const handleReverse = () => {\n    let reversedText = text.split(\"\").reverse().join(\"\");\n    setText(reversedText);\n    props.showAlert(\"String reversed successfully\",\"success\");\n  }\n  const handleCopy = () => {\n    var text = document.getElementById(\"myBox\");\n    text.select();\n    navigator.clipboard.writeText(text.value);\n    document.getSelection().removeAllRanges();\n    props.showAlert(\"Text copied successfully\",\"success\");\n  }\n  const handleSpaces = () => {\n    // eslint-disable-next-line\n    let newText = text.split(/[  ] +/);\n    setText(newText.join(\" \"))\n    props.showAlert(\"Spaces removed successfully\",\"success\");\n  }\n\n  const handleOnChange = (event) => {\n    // console.log(\"on change\");\n    setText(event.target.value);\n  }\n\n  const[text, setText] = useState('');\n  // setText(\"Jain\");\n  return (\n    <>\n\n    {/* upper  */}\n\n\n\n    <div className=\"container\" style={{color: props.mode ==='dark'?'white':'#042743'}}>\n        <h2 className='mb-4'>{props.heading}</h2>\n\n\n        {/* textarea */}\n\n        <div class=\"mb-3\">\n          <textarea className=\"form-control\" value = {text} onChange={handleOnChange} style={{backgroundColor: props.mode ==='dark'?'#13466e':'white' ,color: props.mode==='dark'?'white':'#0422743' }} id=\"myBox\" rows=\"8\"></textarea>\n        </div>\n\n\n        {/* buttons */}\n        <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={handleUpClick}> Convert to UpperCase </button>\n        <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={handleLoClick}> Convert to LowerCase </button>\n        <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={handleReverse}> Reverse the string </button>\n        <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={handleCopy}> Copy the text </button>\n        <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={handleSpaces}> Remove the spaces </button>\n\n\n\n    </div>\n\n\n    {/* bottom */}\n\n\n    <div className=\"container my-3\" style={{color: props.mode ==='dark'?'white':'#042743'}}>\n      <h1>Your text summary</h1>\n      <p>{text.split(\" \").filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\n      <p> {0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} minuters to read</p>\n      <h2>Preview</h2>\n      <p>{text.length>0?text:\"Nothing to preview\"}</p>\n    </div>\n    </>\n  )\n}","import React from 'react'\n\nfunction Alert(props) {\n\n    // const capitalize = (word) =>{\n    //     const str = word.toLowerCase();\n    //     return str.charAt(0).toUpperCase + str.slice(1);\n    // }\n\n  return (\n\n        // iske bahar <div> lga tha to error aa rha tha     \n        <div style={{height:'50px'}}>\n          {props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`}    role=\"alert\">\n              {/* <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} */}\n              <strong>{props.alert.type}</strong>: {props.alert.msg}\n          </div>\n        }\n        </div>\n  )\n}\n\nexport default Alert\n","// import logo from './logo.svg';\nimport './App.css';\nimport About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport React, {useState} from 'react';\nimport Alert from './Components/Alert';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  // Link\n} from \"react-router-dom\";\n\n\n\nfunction App() {\n  // it will tell whether dark mode is enabled or not\n  const [mode, setMode] = useState('light');\n\n  const removeBodyClasses=()=>{\n    document.body.classList.remove('bg-light');\n    document.body.classList.remove('bg-dark');\n    document.body.classList.remove('bg-success');\n    document.body.classList.remove('bg-primary');\n    document.body.classList.remove('bg-warning');\n    document.body.classList.remove('bg-danger');\n  }\n\n  const toggleMode = (cls) => {\n    removeBodyClasses();\n    document.body.classList.add('bg-'+cls);\n      // if(mode === 'light'){\n      //   setMode('dark');\n      //   document.body.style.backgroundColor = '#042743';\n      //   showAlert(\"Dark mode has been enabled\", \"success\");\n      //   // document.title = 'TextUtils - Dark Mode';\n      // }else{\n      //   setMode('light');\n      //   document.body.style.backgroundColor = 'white';\n      //   showAlert(\"Light mode has been enabled\", \"success\");\n      //   // document.title = 'TextUtils - Light Mode';\n      // }\n      // let bgcolr = 'a';\n      // let colr = 'b';\n      // switch (mode) {\n      //   case 'green':\n      //     setMode('green');\n      //     document.body.style.backgroundColor = 'green';\n      //     showAlert(\"Green mode has been enabled\", \"success\");\n      //     bgcolr = 'green';\n      //     colr = 'white';\n      //     break;\n      //   case 'blue':\n      //     setMode('blue');\n      //     document.body.style.backgroundColor = 'blue';\n      //     showAlert(\"Blue mode has been enabled\", \"success\");\n      //     bgcolr = 'blue';\n      //     colr = 'white';\n      //     break; \n      //   case 'red':\n      //     setMode('red');\n      //     document.body.style.backgroundColor = 'red';\n      //     showAlert(\"Red mode has been enabled\", \"success\");\n      //     bgcolr = 'red';\n      //     colr = 'white';\n      //     break;\n      //   case 'dark':\n      //     setMode('dark');\n      //     document.body.style.backgroundColor = 'black';\n      //     showAlert(\"Dark mode has been enabled\", \"success\");\n      //     bgcolr = 'black';\n      //     colr = 'white';\n      //     break;\n      //   case 'light':\n      //     setMode('light');\n      //     document.body.style.backgroundColor = 'white';\n      //     showAlert(\"light mode has been enabled\", \"success\");\n      //     bgcolr = 'white';\n      //     colr = 'black';\n      //     break;\n      //   default:\n      //     setMode('light');\n      //     document.body.style.backgroundColor = 'white';\n      //     showAlert(\"light mode has been enabled\", \"success\");\n      //     bgcolr = 'white';\n      //     colr = 'black';\n      // }\n  }\n\n\n  // for alert message\n  const[alert, setAlert] = useState(null); // here my alert was null\n\n  const showAlert = (message, type) => {         // now my alert is an object, set alert - alert ko set update karne ke liye hai aur show alert ek function hai jo madad karega function ko show karne me \n  // type me 1) red-danger 2) green-success 3)yellow - warning 4) blue \n      setAlert({\n        msg: message, \n        type: type\n      })\n      setTimeout(() => {\n        setAlert(null);\n      }, 3000);\n  }\n\n  return (\n    <>\n    <Router>\n\n\n\n      <Navbar title = 'TextUtils' mode={mode} toggleMode={toggleMode} aboutText = \"About TextUtils\"/>\n      <Alert alert={alert}/>\n\n\n     <div className=\"container my-3\">\n        {/* here we passed show alert method to textform then we will use it in every button */}\n\n\n\n        <Routes>\n\n          <Route exact path=\"/about\" element={<About mode={mode}/>} />\n            {/* <About /> */}\n          {/* </Route> */}\n  \n          <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading = \"Try TextUtils - Word Counter, Character Counter, Remove Extra Spaces\" mode={mode}/>}/>\n            {/* <TextForm showAlert={showAlert} heading = \"Enter the text to analyze below\" mode={mode}/> */}\n          {/* </Route> */}\n        </Routes>\n\n\n\n        {/* <Routes>\n\n          <Route path=\"/about\">\n            <About/>\n          </Route>\n          <Route path=\"/\" >\n            <TextForm showAlert={showAlert} heading = \"Enter the text to analyze below\" mode={mode}/>\n          </Route>\n\n\n        </Routes> */}\n\n\n\n      </div> \n      \n\n      {/* <div className=\"container my-3\">\n        <About>  </About>\n      </div>\n       */}\n\n\n    </Router> \n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}